{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "colab": {
      "name": "HW6.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "87lVBrvqUygD"
      },
      "source": [
        "# Homework 6 RF Accuracy Improvement\n",
        "\n",
        "This assignment is inspired by examples of Shan-Hung Wu from National Tsing Hua University.\n",
        "\n",
        "Requirement: improve the accuracy per feature of the following code from 0.03 up to at least 0.40 and accuracy should be more than 0.92\n",
        "\n",
        "Here are three hints:\n",
        "\n",
        "    You can improve the ratio by picking out or \"creating\" several features.\n",
        "    Tune hyperparameters\n",
        "    The ratio can be improved from 0.03 up to 0.47."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qnIPBYAuUygH",
        "outputId": "fc4568b7-f3e3-420a-9622-4db4e28065f7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.datasets import load_breast_cancer\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn import datasets\n",
        "from sklearn import svm\n",
        "import numpy as np\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn import metrics\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "\n",
        "\n",
        "# load the breast_cancer dataset\n",
        "init_data = load_breast_cancer()\n",
        "(X, y) = load_breast_cancer(return_X_y=True)\n",
        "\n",
        "print(X.shape)\n",
        "\n",
        "# TODO Select some features (X), hint: based on the connections with\n",
        "# our Y (importance? correlation?)\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3, random_state=0)\n",
        "\n",
        "# TODO need 5 fold cross validation\n",
        "clf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train)\n",
        "clf.score(X_test, y_test)\n",
        "scores = cross_val_score(clf, X, y, cv=5)\n",
        "print(\"Accuracy: %0.2f (+/- %0.2f)\" % (scores.mean(), scores.std() * 2))\n",
        "\n",
        "\n",
        "# TODO Tune parameters for RandomForestClassifier\n",
        "\n",
        "clf=RandomForestClassifier(n_estimators=100)\n",
        "clf.fit(X_train,y_train)\n",
        "y_pred=clf.predict(X_test)\n",
        "\n",
        "# TODO Calculate Average accuracy score\n",
        "print('Accuracy: %.2f' % metrics.accuracy_score(y_test, y_pred))\n",
        "\n",
        "# TODO Calculate Average (accuracy score/number of features)\n",
        "print('Accuracy per feature: %.2f' % (metrics.accuracy_score(y_test, y_pred)/2))\n",
        "\n",
        "feature_imp = pd.Series(clf.feature_importances_,index=init_data.feature_names).sort_values(ascending=False)\n",
        "print(feature_imp)\n",
        "print(type(feature_imp))"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(569, 30)\n",
            "Accuracy: 0.95 (+/- 0.04)\n",
            "Accuracy: 0.96\n",
            "Accuracy per feature: 0.48\n",
            "worst concave points       0.177987\n",
            "worst perimeter            0.123229\n",
            "worst area                 0.117722\n",
            "worst radius               0.110806\n",
            "mean concave points        0.091658\n",
            "mean concavity             0.060089\n",
            "mean perimeter             0.043490\n",
            "area error                 0.036844\n",
            "worst compactness          0.026815\n",
            "worst concavity            0.024816\n",
            "mean area                  0.020543\n",
            "mean radius                0.017996\n",
            "worst symmetry             0.015551\n",
            "mean compactness           0.015230\n",
            "worst texture              0.014036\n",
            "radius error               0.012943\n",
            "perimeter error            0.012855\n",
            "concave points error       0.011387\n",
            "worst fractal dimension    0.009046\n",
            "worst smoothness           0.008972\n",
            "mean texture               0.008327\n",
            "concavity error            0.006562\n",
            "symmetry error             0.005590\n",
            "mean smoothness            0.005296\n",
            "compactness error          0.005074\n",
            "mean symmetry              0.004238\n",
            "texture error              0.003507\n",
            "mean fractal dimension     0.003321\n",
            "smoothness error           0.003310\n",
            "fractal dimension error    0.002760\n",
            "dtype: float64\n",
            "<class 'pandas.core.series.Series'>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pDbGZ3umUygK"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}